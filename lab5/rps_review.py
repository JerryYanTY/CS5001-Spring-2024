import random


def get_user_choice():
    # Get user input for their choice (rock, paper, or scissors)
    user_action = input("Enter your choice (rock, paper, scissors): ")
    return user_action.lower()


def get_computer_choice():
    # Generate a random choice for the computer
    choices = ["rock", "paper", "scissors"]
    return random.choice(choices)


def determine_winner(user, computer):
    # Determine the winner based on the game rules
    if user == computer:
        return "It's a tie!"
    elif (user == "rock" and computer == "scissors") or (user == "scissors" and computer == "paper") or (
            user == "paper" and computer == "rock"):
        return "You win!"
    else:
        return "Computer wins!"


def play_game():
    while True:
        user_choice = get_user_choice()
        computer_choice = get_computer_choice()
        print(f"\nYou chose {user_choice}. Computer chose {computer_choice}.")
        print(determine_winner(user_choice, computer_choice))
        play_again = input("Do you want to play again? (yes/no): ")
        if play_again.lower() != "yes":
            break


print("Welcome to Rock-Paper-Scissors!")
play_game()
print("Thanks for playing!")

''' This code is generated by Bing's Copilot.
 1. The naming of every function and variable is easy to comprehend. 
 2. The program does turn the user's input to lower cases, which is good, but it never checks whether
    the user's input is acceptable, which could lead to an incorrect output.
 3. The style is pretty concise. The play_game() function can really make the main() (if there is one) really
    clean.
 4. The use of while loop in the play_game function is really clever, but again, though it changes user's input
    to lower case, it does not check the validity of the input. If we give it a answer other than yes/no, it does 
    not behave correctly.
 5. No type hints are used throughout the program, which could be bit confusing when one reads through the code.'''
